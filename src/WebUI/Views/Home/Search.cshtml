@using Application.Common.Models
@model Application.Search.Queries.SearchHotelRooms.SearchHotelRoomsResponse
@{
    ViewData["Title"] = "Search";
}

<div class="breadcumb_area bg-img mt-100" style="background-image: url(img/core-img/breadcumb.jpg);">
    <div class="container h-100">
        <div class="row h-100 align-items-center">
            <div class="col-12">
                <div class="page-title text-center">
                    <h2>Explore Your Favorite Hotels</h2>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- ##### Shop Area ##### -->
<section class="shop_grid_area section-padding-80">
    <div class="container">
        <div class="row">
            <div class="col-12 col-md-4 col-lg-3">
                <div class="shop_sidebar_area">
                    <!-- ##### Single Widget ##### -->
                    <div class="widget catagory mb-50">
                        <!-- Widget Title -->
                        <h6 class="widget-title mb-30">Filter by:</h6>
                        <!--  Catagories  -->
                        <div class="catagories-menu">
                            <ul id="menu-content2" class="menu-content collapse show">
                                <!-- Single Item -->
                                <li data-toggle="collapse" data-target="#capacity">
                                    <a class="link">Room capacity</a>
                                    <ul class="sub-menu collapse show" id="capacity">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <li><a href="@Url.Action("Search", "Home", new { term = Context.Request.Query["term"], from = Context.Request.Query["from"], to = Context.Request.Query["to"], capacity = i, page = Context.Request.Query["page"], type = Context.Request.Query["type"], start = Context.Request.Query["start"], end = Context.Request.Query["end"], sort = Context.Request.Query["sort"] })">@(i) adults</a></li>
                                        }
                                    </ul>
                                </li>
                                <!-- Single Item -->
                                <li data-toggle="collapse" data-target="#roomType">
                                    <a class="link">Room type</a>
                                    <ul class="sub-menu collapse show" id="roomType">
                                        @{
                                            var enums = (RoomType[])Enum.GetValues(typeof(RoomType));
                                            for (int i = 0; i < enums.Length; i++)
                                            {
                                                <li>
                                                    <a href="@Url.Action("Search", "Home", new { term = Context.Request.Query["term"], from = Context.Request.Query["from"], to = Context.Request.Query["to"], capacity = Context.Request.Query["capacity"], page = Context.Request.Query["page"], type = i, start = Context.Request.Query["start"], end = Context.Request.Query["end"], sort = Context.Request.Query["sort"] })">
                                                        @string.Join(' ', Regex.Split(enums[i].ToString(), "(?<!^)(?=[A-Z0-9])"))
                                                    </a>
                                                </li>
                                            }
                                        }
                                    </ul>
                                </li>

                            </ul>
                        </div>
                    </div>
                    <!-- ##### Single Widget ##### -->
                    <div class="widget price mb-50">
                        <!-- Widget Title -->
                        <p class="widget-title2 mb-30">Price</p>
                        <div class="widget-desc">
                            <div class="slider-range">
                                <div id="priceSlider"></div>
                                <div id="priceValues" class="range-price">@Model.CurrencyCode @(int.TryParse(Context.Request.Query["start"], out var minPrice) ? minPrice : 0) - @(int.TryParse(Context.Request.Query["end"], out var maxPrice) ? maxPrice : Model.HighestPrice)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-12 col-md-8 col-lg-9">
                <div class="shop_grid_product_area">
                    <div class="row">
                        <div class="col-12">
                            <div class="product-topbar d-flex align-items-center justify-content-between">
                                <!-- Total Products -->
                                <div class="total-products">
                                    <p><span>@Model.Count</span> found properties </p>
                                </div>
                                <!-- Sorting -->
                                <div class="product-sorting d-flex">
                                    <p>Sorted by</p>
                                    <select name="select" id="sortByselect">
                                        @{
                                            var sorts = (SortBy[])Enum.GetValues(typeof(SortBy));
                                            var current = int.TryParse(Context.Request.Query["sort"], out var result) ? result : 0;
                                            for (int i = 0; i < sorts.Length; i++)
                                            {
                                                var split = string.Join(' ', Regex.Split(sorts[i].ToString(), "(?<!^)(?=[A-Z0-9])"));
                                                if (current == i)
                                                {
                                                    <option value="@i" selected>@split</option>
                                                }
                                                else
                                                {
                                                    <option value="@i">@split</option>
                                                }
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        @foreach (var room in Model.HotelRooms)
                        {
                            <div class="col-12 col-sm-6 col-lg-4">
                                <div class="single-product-wrapper">
                                    <!-- Product Image -->
                                    <div class="product-img">
                                        <img src="@room.Image" alt="">
                                    </div>
                                    <!-- Product Description -->
                                    <div class="product-description">
                                        <a asp-action="Details" asp-route-id="@room.Id">
                                            <h6>@room.Name</h6>
                                        </a>
                                        <p class="product-price">@Math.Round(room.Price, 2) @Model.CurrencyCode</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <!-- Navigation -->
                <nav aria-label="navigation">
                    <ul class="pagination mt-50 mb-70">
                        @{
                            var countToPage = (int)Math.Ceiling(Model.Count / 20d);
                            var currentPage = int.TryParse(Context.Request.Query["page"], out var pageResult) ? pageResult : 0;
                            <li class="page-item"><a class="page-link" href="@Url.Action("Search", "Home", new { term = Context.Request.Query["term"], from = Context.Request.Query["from"], to = Context.Request.Query["to"], capacity = Context.Request.Query["capacity"], page = currentPage > 0 ? currentPage - 1 : 0, type = Context.Request.Query["type"], start = Context.Request.Query["start"], end = Context.Request.Query["end"], sort = Context.Request.Query["sort"] })"><i class="fa fa-angle-left"></i></a></li>
                            if (currentPage > 2)
                            {
                                <li class="page-item"><a class="page-link" href="@Url.Action("Search", "Home", new { term = Context.Request.Query["term"], from = Context.Request.Query["from"], to = Context.Request.Query["to"], capacity = Context.Request.Query["capacity"], page = 0, type = Context.Request.Query["type"], start = Context.Request.Query["start"], end = Context.Request.Query["end"], sort = Context.Request.Query["sort"] })">1</a></li>
                            }
                            if (currentPage > 3)
                            {
                                <li class="page-item"><a class="page-link">...</a></li>
                            }
                            var length = currentPage + 1 > countToPage ? countToPage : currentPage + 1;
                            for (int i = currentPage > 0 ? (currentPage > 1 ? currentPage - 2 : currentPage - 1) : currentPage; i < length; i++)
                            {
                                <li class="page-item"><a class="page-link" href="@Url.Action("Search", "Home", new { term = Context.Request.Query["term"], from = Context.Request.Query["from"], to = Context.Request.Query["to"], capacity = Context.Request.Query["capacity"], page = i, type = Context.Request.Query["type"], start = Context.Request.Query["start"], end = Context.Request.Query["end"], sort = Context.Request.Query["sort"] })">@(i + 1)</a></li>
                            }
                            if (currentPage < countToPage - 2)
                            {
                                <li class="page-item"><a class="page-link">...</a></li>
                            }
                            if (currentPage < countToPage - 1)
                            {
                                <li class="page-item"><a class="page-link" href="@Url.Action("Search", "Home", new { term = Context.Request.Query["term"], from = Context.Request.Query["from"], to = Context.Request.Query["to"], capacity = Context.Request.Query["capacity"], page = countToPage - 1, type = Context.Request.Query["type"], start = Context.Request.Query["start"], end = Context.Request.Query["end"], sort = Context.Request.Query["sort"] })">@(countToPage)</a></li>
                            }
                            <li class="page-item"><a class="page-link" href="@Url.Action("Search", "Home", new { term = Context.Request.Query["term"], from = Context.Request.Query["from"], to = Context.Request.Query["to"], capacity = Context.Request.Query["capacity"], page = countToPage > 0 ? countToPage - 1 : 0, type = Context.Request.Query["type"], start = Context.Request.Query["start"], end = Context.Request.Query["end"], sort = Context.Request.Query["sort"] })"><i class="fa fa-angle-right"></i></a></li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</section>

@section Styles {
    <link rel="stylesheet" type="text/css" href="css/util.css">
    <link rel="stylesheet" type="text/css" href="css/main-contacts.css" />
    <link href="node_modules\jquery-ui\themes\base\slider.css" rel="stylesheet" />
}

@section Scripts {
    <script src="js/jquery-ui.min.js"></script>
    <script>
        (() => {
            const url = '@Url.Action("Search", "Home", new { term = Context.Request.Query["term"], from = Context.Request.Query["from"], to = Context.Request.Query["to"], capacity = Context.Request.Query["capacity"], page = Context.Request.Query["page"], type = Context.Request.Query["type"], start = Context.Request.Query["start"], end = Context.Request.Query["end"] })';
            $('#sortByselect').on('change', function () {
                document.location.href = document.location.origin + (url === '/Home/Search' ? url + '?' : url + '&') + 'sort=' + this.value;
            });

            const url2 = '@Url.Action("Search", "Home", new { term = Context.Request.Query["term"], from = Context.Request.Query["from"], to = Context.Request.Query["to"], capacity = Context.Request.Query["capacity"], page = Context.Request.Query["page"], type = Context.Request.Query["type"], sort = Context.Request.Query["sort"] })';
            const priceValues = $('#priceValues');
            $('#priceSlider').slider({
                range: true,
                min: 0,
                max: @(Model.HighestPrice),
                values: [@(int.TryParse(Context.Request.Query["start"], out var minPrice) ? minPrice : 0), @(int.TryParse(Context.Request.Query["end"], out var maxPrice) ? maxPrice : Model.HighestPrice)],
                slide: function (_, ui) {
                    var result = '@Model.CurrencyCode' + ' ' + ui.values[0] + ' - ' + ui.values[1];
                    priceValues.html(result);
                },
                stop: function (_, ui) {
                    document.location.href = document.location.origin + (url2 === '/Home/Search' ? url2 + '?' : url2 + '&') + 'start=' + ui.values[0] + '&end=' + ui.values[1];
                }
            });
        })();
    </script>
}